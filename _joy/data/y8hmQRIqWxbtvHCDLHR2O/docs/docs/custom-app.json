[{"type":"docsModel/__SET_STATE","state":{"docMenus":[{"title":"高级使用","path":"/docs/advanced-features","children":[{"title":"自定义 App","path":"/docs/custom-app","hasMenu":false,"htmlContent":"<h1 id=\"自定义-app\">自定义 App</h1>\n<p>Joy 使用<code>App</code>来包装和初始化整个界面，我们可以自定它来控制页面的初始化，例如：</p>\n<ul>\n<li>添加所有页面共有的布局。</li>\n<li>捕获渲染错误，使用<code>componentDidCatch</code>。</li>\n<li>修改路由或者路由的渲染方式。</li>\n<li>添加全局样式。</li>\n</ul>\n<p>我们开始覆盖默认的<code>App</code>， 创建文件<code>./src/pages/_app.tsx</code>，修改其内容：</p>\n<pre><code class=\"hljs language-tsx\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;\n<span class=\"hljs-keyword\">import</span> { IReactApplication, <span class=\"hljs-title class_\">ReactRouter</span>, <span class=\"hljs-title class_\">RouteSwitch</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;@symph/react&quot;</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">ReactAppProps</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;@symph/joy&quot;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span>&lt;<span class=\"hljs-title class_\">ReactAppProps</span>, <span class=\"hljs-built_in\">any</span>&gt; {\n  <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-attr\">reactRouter</span>: <span class=\"hljs-title class_\">ReactRouter</span>;\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">props: ReactAppProps, context?: <span class=\"hljs-built_in\">any</span></span>) {\n    <span class=\"hljs-variable language_\">super</span>(props, context);\n    <span class=\"hljs-keyword\">const</span> appContext = props.<span class=\"hljs-property\">appContext</span>;\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">reactRouter</span> = appContext.<span class=\"hljs-property\">getSync</span>&lt;<span class=\"hljs-title class_\">ReactRouter</span>&gt;(<span class=\"hljs-string\">&quot;reactRouter&quot;</span>);\n  }\n  <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">const</span> routes = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">reactRouter</span>.<span class=\"hljs-title function_\">getRoutes</span>() || [];\n    <span class=\"hljs-keyword\">return</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">RouteSwitch</span> <span class=\"hljs-attr\">routes</span>=<span class=\"hljs-string\">{routes}</span> <span class=\"hljs-attr\">extraProps</span>=<span class=\"hljs-string\">{{}}</span> /&gt;</span></span>;\n  }\n}\n</code></pre>\n<p><code>App</code> 的<code>props</code>中包含了<code>IReactApplication</code>实例，我们可以通过它获取到整个 React 应用的业务组件，例如上面例子中的<code>reactRouter</code>路由组件。\n<code>render()</code>中使用的<code>RouteSwitch</code>组件来渲染应用中注册的路由，包括文件约定路由。</p>\n<h2 id=\"注意事项：\">注意事项：</h2>\n<ul>\n<li>如果你的应用正在开发模式下运行中，首次添加<code>./src/pages/_app.js</code>文件，需要重新启动开发服务器。</li>\n<li><code>App</code>在服务端和浏览器上都会被渲染，所以不能在这里使用<code>Node.js</code>特有的 API。</li>\n</ul>\n"},{"title":"自定义 Document","path":"/docs/custom-document","hasMenu":false,"htmlContent":"<h1 id=\"自定义-document\">自定义 Document</h1>\n<p><code>Document</code> React 组件用于生成页面的<code>&lt;html&gt;</code>和<code>&lt;body&gt;</code>标签， Joy 会根据应用内的组件和样式，自动生成必须的 js 和 css 标签，保证页面 html 能够正常被加载。\n我们可以通过自定义<code>Document</code>在<code>&lt;html&gt;</code>加入自定义的扩展<code>&lt;head&gt;</code>、<code>&lt;link&gt;</code>或者<code>&lt;sciprt&gt;</code>。</p>\n<p>覆盖默认的<code>Document</code>，创建文件<code>./src/pages/_document.tsx</code>并修改<code>Document</code>如下：</p>\n<pre><code class=\"hljs language-tsx\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Document</span>, { <span class=\"hljs-title class_\">Html</span>, <span class=\"hljs-title class_\">Head</span>, <span class=\"hljs-title class_\">Main</span>, <span class=\"hljs-title class_\">JoyScript</span>, <span class=\"hljs-title class_\">DocumentContext</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;@symph/joy/document&quot;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyDocument</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Document</span>&lt;<span class=\"hljs-built_in\">any</span>&gt; {\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-title function_\">getInitialProps</span>(<span class=\"hljs-params\">ctx: DocumentContext</span>) {\n    <span class=\"hljs-keyword\">const</span> initialProps = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title class_\">Document</span>.<span class=\"hljs-title function_\">getInitialProps</span>(ctx);\n    <span class=\"hljs-keyword\">return</span> { ...initialProps };\n  }\n\n  <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> (\n      <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Html</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Head</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Head</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Main</span> /&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">JoyScript</span> /&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Html</span>&gt;</span></span>\n    );\n  }\n}\n</code></pre>\n<blockquote>\n<p>上面示例中的<code>MyDocument</code>，等效于 Joy 默认的<code>Document</code>，未加入自定义的内容，如果不需要<code>getInitialProps</code>或者<code>render</code>方法，可以删除掉。</p>\n</blockquote>\n<p><code>Html</code>、<code>Head</code>、<code>Main</code>和<code>JoyScript</code>是页面必须的，在自定义的<code>Document</code>类中，不要删除它们和更改顺序。\n但它们支持一些自定义的属性，例如：</p>\n<pre><code class=\"hljs language-tsx\">&lt;<span class=\"hljs-title class_\">Html</span> lang=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;\n</code></pre>\n<p>这里的<code>&lt;Head /&gt;</code>不同于<code>@symph/joy/react</code>中的<code>Head</code>组件，这里的<code>&lt;Head /&gt;</code>用于定义在所有页面中共有的<code>&lt;head&gt;</code>元素，而其它的，例如<code>&lt;title&gt;</code>标签，建议在页面组件中使用<code>@symph/joy/react</code>中的<code>Head</code>组件来定义。</p>\n<p><code>getInitialProps</code>方法返回<code>Document</code>组件的初始 props，参数<code>ctx: DocumentContext</code>具有以下属性：</p>\n<ul>\n<li><code>pathname</code>：<code>string</code>，当前渲染的页面路径。</li>\n<li><code>query</code>： <code>object</code>， url 中的请求参数被解析后的对象。</li>\n<li><code>req</code>：<a href=\"https://nodejs.org/api/http.html#http_class_http_incomingmessage\"><code>IncomingMessage</code></a>, 触发当前渲染的请求对象。</li>\n<li><code>res</code>：<a href=\"https://nodejs.org/api/http.html#http_class_http_serverresponse\"><code>ServerResponse</code></a>, 触发当前渲染的请求的响应对象。</li>\n<li><code>err</code> ：Error, 在渲染阶段出现的异常。</li>\n<li><code>renderPage</code>: <code>functin</code> 将<code>App</code>渲染为 html 字符串，返回值<code>{html, head}</code>在服务端渲染时。</li>\n</ul>\n<h2 id=\"注意事项\">注意事项</h2>\n<ul>\n<li><code>Document</code>只在服务端被渲染，事件处理并不会触发执行，例如<code>onClick</code>事件。同理 React 的部分生命周期也不会执行，例如<code>onComponentDidMount</code>。</li>\n<li>在<code>&lt;Main/&gt;</code>之外的 React 组件并不会被浏览器初始化，所以不要在这里添加任何业务逻辑。如果需要给整个应用添加统一的组件，可以在根布局组件中添加，或者<code>App</code>中添加。</li>\n</ul>\n"}]},{"title":"基础使用","path":"/docs/basic","children":[{"title":"快速开始","path":"/docs/getting-started","hasMenu":false,"htmlContent":"<h1 id=\"快速开始\">快速开始</h1>\n<p>Joy 支持 React、Node 或者前后端混合应用开发，这里以一个简单的 React 应用为例，介绍如何快速开始开发。</p>\n<h2 id=\"环境准备\">环境准备</h2>\n<ul>\n<li><p>node 建议 12 或以上版本，推荐使用 nvm 来管理 node 版本。</p>\n</li>\n<li><p>推荐使用 yarn 管理依赖，国内使用 <a href=\"https://npmmirror.com/\">阿里 npm 源</a> registry: <a href=\"https://registry.npm.taobao.org\">https://registry.npm.taobao.org</a></p>\n</li>\n</ul>\n<pre><code class=\"hljs language-shell\"><span class=\"hljs-meta\"># </span><span class=\"language-bash\">安装 yarn</span>\n<span class=\"hljs-meta\">$ </span><span class=\"language-bash\">npm i yarn -g</span>\n<span class=\"hljs-meta\"># </span><span class=\"language-bash\">手动设置`registry`地址为国内源</span>\n<span class=\"hljs-meta\">$ </span><span class=\"language-bash\">yarn config <span class=\"hljs-built_in\">set</span> registry https://registry.npm.taobao.org</span>\n<span class=\"hljs-meta\"># </span><span class=\"language-bash\">查看源</span>\n<span class=\"hljs-meta\">$ </span><span class=\"language-bash\">yarn config get registry</span>\n<span class=\"hljs-meta\">\n# </span><span class=\"language-bash\">或者使用 tyarn</span>\n<span class=\"hljs-meta\">$ </span><span class=\"language-bash\">npm i yarn tyarn -g</span>\n<span class=\"hljs-meta\"># </span><span class=\"language-bash\">后面文档里的 yarn 换成 tyarn</span>\n<span class=\"hljs-meta\">$ </span><span class=\"language-bash\">tyarn -v</span>\n</code></pre>\n<h2 id=\"创建目录\">创建目录</h2>\n<p>创建应用根目录</p>\n<pre><code class=\"hljs language-shell\"><span class=\"hljs-meta\">$ </span><span class=\"language-bash\"><span class=\"hljs-built_in\">mkdir</span> myapp &amp;&amp; <span class=\"hljs-built_in\">cd</span> myapp</span>\n</code></pre>\n<p>创建应用内目录和文件，目录结构如下：</p>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-string\">myapp</span>\n  <span class=\"hljs-string\">src</span>  <span class=\"hljs-comment\"># 源代码目录</span>\n    <span class=\"hljs-string\">pages</span>  <span class=\"hljs-comment\"># 约定React路由目录</span>\n      <span class=\"hljs-string\">index.tsx</span>  <span class=\"hljs-comment\"># 第一个页面</span>\n  <span class=\"hljs-string\">package.json</span>\n</code></pre>\n<ul>\n<li>在 package.json 内声明应用名和依赖：</li>\n</ul>\n<pre><code class=\"hljs language-json\"><span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;myapp&quot;</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;version&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;v1.0.0&quot;</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;scripts&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">&quot;dev&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;joy dev&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">&quot;export&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;joy build&amp;&amp;joy export&quot;</span>\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;dependencies&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">&quot;react&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;^17.0.1&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">&quot;react-dom&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;^17.0.1&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">&quot;@symph/joy&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;^2.0.0&quot;</span>\n  <span class=\"hljs-punctuation\">}</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<ul>\n<li>创建第一个路由页面<code>index.tsx</code>, Joy 同时支持 ES6 和 Typescript 语法，如果使用 ES6，创建 JS 文件<code>index.jsx</code>，添加页面展现内容:</li>\n</ul>\n<pre><code class=\"hljs language-tsx\"><span class=\"hljs-comment\">// src/pages/index.tsx</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">ReactController</span>, <span class=\"hljs-title class_\">BaseReactController</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;@symph/react&quot;</span>;\n\n<span class=\"hljs-meta\">@ReactController</span>()\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Index</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">BaseReactController</span> {\n  <span class=\"hljs-title function_\">renderView</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Hello Joy!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span>;\n  }\n}\n</code></pre>\n<h2 id=\"安装依赖\">安装依赖</h2>\n<pre><code class=\"hljs language-shell\"><span class=\"hljs-meta\">$ </span><span class=\"language-bash\">yarn install</span>\n</code></pre>\n<h2 id=\"启动开发服务器\">启动开发服务器</h2>\n<pre><code class=\"hljs language-shell\"><span class=\"hljs-meta\">$ </span><span class=\"language-bash\">yarn dev</span>\n</code></pre>\n<p>当命令行输出<code>ready - started server on http://localhost:3000</code>时，开发服务器启动成功，打开浏览器输入地址 <code>http://localhost:3000</code>，即可看到我们的第一个页面<code>Hello Joy!</code>。\n若此时修改页面内容<code>Hello Joy!</code>为<code>Hello MyApp</code>，然后保存文件，浏览器界面将自动更新为新内容。</p>\n<h2 id=\"部署发布\">部署发布</h2>\n<h3 id=\"构建\">构建</h3>\n<pre><code class=\"hljs language-shell\"><span class=\"hljs-meta\">$ </span><span class=\"language-bash\">yarn <span class=\"hljs-built_in\">export</span></span>\n</code></pre>\n<p>构建产物默认生成到 ./out 下，目录结构类似于：</p>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-string\">./out</span>\n<span class=\"hljs-string\">index.html</span>\n<span class=\"hljs-number\">404.</span><span class=\"hljs-string\">html</span>\n<span class=\"hljs-string\">_joy/</span> <span class=\"hljs-comment\"># 包含js、css、json等</span>\n</code></pre>\n<h3 id=\"本地验证\">本地验证</h3>\n<p>使用<code>http-server</code>启动本地静态文件服务器</p>\n<pre><code class=\"hljs language-shell\"><span class=\"hljs-meta\"># </span><span class=\"language-bash\">安装 http-server</span>\n<span class=\"hljs-meta\">$ </span><span class=\"language-bash\">npm i -g http-server</span>\n<span class=\"hljs-meta\">\n# </span><span class=\"language-bash\">启动服务器</span>\n<span class=\"hljs-meta\">$ </span><span class=\"language-bash\">http-server ./out</span>\n</code></pre>\n<p>在浏览器上打开地址：<a href=\"http://127.0.0.1:8080\">http://127.0.0.1:8080</a>, 正常情况下应该是和<code>yarn dev</code>开发运行时是一致的。</p>\n<h3 id=\"部署\">部署</h3>\n<p>本地验证完成后，将<code>out</code>目录部署到服务器上即可。</p>\n"},{"title":"配置","path":"/docs/basic/config","children":[{"title":"配置","path":"/docs/basic/config-manager","hasMenu":false,"htmlContent":"<h1 id=\"配置\">配置</h1>\n<p>Joy 遵循约定大于配置原则，参考最佳实践约定默认配置，0 配置也可启动应用，即新应用无需配置文件也可立即运行和发布。</p>\n<h2 id=\"配置文件\">配置文件</h2>\n<p>Joy 在<code>joy.config.ts</code>或者<code>config/config.ts</code>中配置项目，支持 ts、js、json、es6 文件格式。例如：</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-comment\">// joy.config.ts</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-attr\">basePath</span>: <span class=\"hljs-string\">&quot;&quot;</span>,\n  <span class=\"hljs-attr\">apiPrefix</span>: <span class=\"hljs-string\">&quot;/api&quot;</span>,\n  <span class=\"hljs-attr\">ssr</span>: <span class=\"hljs-literal\">true</span>,\n};\n</code></pre>\n<p>如果项目的配置不复杂，推荐在 <code>joy.config.ts</code> 中写配置; 如果项目的配置比较复杂，可以将配置写在 config/config.ts 中，并把配置的一部分拆分出去，加载配置时会自动合并到主配置中，例如路由配置可以拆分成单独的 routes.ts：</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-comment\">// config/routes.ts</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> [{ <span class=\"hljs-attr\">exact</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&quot;/&quot;</span>, <span class=\"hljs-attr\">component</span>: <span class=\"hljs-string\">&quot;index&quot;</span> }];\n</code></pre>\n<p>等同于：</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-comment\">// joy.config.ts</span>\n{\n  <span class=\"hljs-attr\">apiPrefix</span>: <span class=\"hljs-string\">&quot;/api&quot;</span>;\n  <span class=\"hljs-attr\">routes</span>: [{ <span class=\"hljs-attr\">exact</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&quot;/&quot;</span>, <span class=\"hljs-attr\">component</span>: <span class=\"hljs-string\">&quot;index&quot;</span> }];\n}\n</code></pre>\n<h2 id=\"多环境配置\">多环境配置</h2>\n<p>可以通过环境变量<code>NODE_ENV</code>或者<code>JOY_ENV</code>来区分不同环境配置，<code>JOY_ENV</code>的优先级更高。各环境配置文件，统一放在<code>/config</code>目录中，例如：<code>/config/config.beta.ts</code>、<code>/config/config.production.ts</code>。</p>\n<p>各配置的加载顺序：<code>.env</code> ➡ <code>joy.config.ts</code> ➡ <code>config/config.ts</code> ➡ <code>config/config.production.ts</code> ， 后加载的配置会覆盖之前的配置。</p>\n<h2 id=\"本地临时配置\">本地临时配置</h2>\n<p>可以新建 <code>config/config.local.ts</code>文件，例如该配置文件存在，则加载顺序为：\n<code>.env</code> ➡ <code>joy.config.ts</code> ➡ <code>config/config.ts</code> ➡ <code>config/config.development.ts</code> ➡ <code>config/config.local.ts</code> 。</p>\n<p><strong>注意：</strong></p>\n<ul>\n<li>该配置优先级最高，在最后加载该配置文件，且会覆盖之前读取的配置。</li>\n<li><code>config.local.ts</code> 是本地开发调试的临时配置，请将其添加到 <code>.gitignore</code>，<strong>务必不要提交到 git 仓库中</strong></li>\n</ul>\n<h2 id=\"环境变量配置\">环境变量配置</h2>\n<h3 id=\"执行命令时添加环境变量\">执行命令时添加环境变量</h3>\n<p>例如：</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-comment\"># OS X、 Linux</span>\n$ port=3000 joy dev\n\n<span class=\"hljs-comment\"># Windows</span>\n$ <span class=\"hljs-built_in\">set</span> port=3000&amp;&amp;joy dev\n</code></pre>\n<p>如果要同时考虑 OS X 和 Windows，可借助三方工具 cross-env。</p>\n<pre><code class=\"hljs language-bash\">$ yarn add cross-env --dev\n$ cross-env port=3000 umi dev\n</code></pre>\n<h3 id=\"env-配置文件\">.env 配置文件</h3>\n<p>Joy 约定根目录下的<code>.env</code>为环境变量配置文件，该配置文件将在初始化配置时加载，其配置的值于 <a href=\"#%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4%E6%97%B6%E6%B7%BB%E5%8A%A0%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F\">执行命令时添加环境变量</a></p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-comment\">// .env</span>\n\nport = <span class=\"hljs-number\">3000</span>;\nhostname = <span class=\"hljs-string\">&quot;localhost&quot;</span>;\n</code></pre>\n<h2 id=\"应用内获取配置\">应用内获取配置</h2>\n<h3 id=\"通过-configservice-服务获取\">通过 ConfigService 服务获取</h3>\n<p><code>@symph/config</code>提供 <code>ConfigService</code>服务类，Joy 已内置该服务，通过其提供的<code>get&lt;T = any&gt;(configPath?:string, defaultValue?: T): T | undefined</code>方法获取配置值，方法参数：</p>\n<ul>\n<li>configPath: 配置键值，支持 object path，获取配置值对象的内部值。</li>\n<li>defaultValue: 默认值，如果配置不存在，则返回默认值。</li>\n</ul>\n<p>例如有以下配置内容：</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-comment\">// joy.config.ts</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-attr\">database</span>: {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;mysql&quot;</span>,\n    <span class=\"hljs-attr\">host</span>: <span class=\"hljs-string\">&quot;localhost&quot;</span>,\n    <span class=\"hljs-attr\">port</span>: <span class=\"hljs-number\">3306</span>,\n  },\n};\n</code></pre>\n<p>在服务类中获取以上配置值：</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">ConfigService</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;@symph/config&quot;</span>;\n\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Component</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;@symph/core&quot;</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Value</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;@symph/config&quot;</span>;\n\n<span class=\"hljs-meta\">@Component</span>()\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HelloService</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">private</span> configService: ConfigService</span>) {\n    <span class=\"hljs-comment\">// 通过 configKey 获取 配置</span>\n    <span class=\"hljs-keyword\">const</span> database = configService.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">&quot;database&quot;</span>);\n\n    <span class=\"hljs-comment\">// 如果配置值是一个对象，可以通过object path，获取获取对象内部属性的值</span>\n    <span class=\"hljs-keyword\">const</span> host = configService.<span class=\"hljs-property\">get</span>&lt;<span class=\"hljs-built_in\">string</span>&gt;(<span class=\"hljs-string\">&quot;database.host&quot;</span>, <span class=\"hljs-string\">&quot;localhost&quot;</span>);\n  }\n}\n</code></pre>\n<h3 id=\"value-装饰器方式获取\">@Value 装饰器方式获取</h3>\n<p>在组件的属性上，通过<code>@Value(options)</code>装饰器申明需要自动注入配置，注入的属性键值默认为组件的属性名称，例如：</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Component</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;@symph/core&quot;</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Value</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;@symph/config&quot;</span>;\n\n<span class=\"hljs-meta\">@Component</span>()\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HelloService</span> {\n  <span class=\"hljs-comment\">// 读取joy.config.ts中配置的msg的值。</span>\n  <span class=\"hljs-meta\">@Value</span>()\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-attr\">msg</span>: <span class=\"hljs-built_in\">string</span>;\n}\n</code></pre>\n<p><code>@Value(options)</code> 定制参数列表：</p>\n<ul>\n<li><strong>configKey</strong> 类型<code>string</code>，默认等于被装饰的属性名称，指定注入是取的配置文件中的键值，由此属性名称和配置文件中的键值可以不相等。</li>\n<li><strong>schema</strong> 类型<code>json-schema</code>，自定义 <a href=\"https://json-schema.org/learn/getting-started-step-by-step\">json-schema</a> 定义属性规则，不推荐直接使用该属性，大部分情况下可使用<code>@tsed/schema</code>库提供的装饰器来申明校验规则，例如<code>@Max(3)</code>申明该配置的值不能大于 4，否则运行是抛出异常。</li>\n</ul>\n<ul>\n<li><strong>transform</strong> 类型<code>(configValue: any) =&gt; any</code>, 注入值时被调用，入参为配置文件中的值，返回值为转换后的值，然后将转化后的值设置到属性上。</li>\n</ul>\n<blockquote>\n<p><code>@Value()</code>声明的属性，也等于声明了一个配置项及其类型和验证规则，需要避免在不同地方声明相同的配置但又不兼容的类型，这种情况下，我们可以将声明移动到一个独立的配置类中，其它地方如果需要使用该配置，应该依赖和使用该类。</p>\n</blockquote>\n<h4 id=\"校验配置值\">校验配置值</h4>\n<p>使用<code>@tsed/schema</code>库提供的装饰器来申明校验规则。</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Component</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;@symph/core&quot;</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Max</span>, <span class=\"hljs-title class_\">MaxLength</span>, <span class=\"hljs-title class_\">Required</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;@tsed/schema&quot;</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Value</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;@symph/config&quot;</span>;\n\n<span class=\"hljs-meta\">@Component</span>()\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BasicConfig</span> {\n  <span class=\"hljs-comment\">// 配置类型为number，且不能大于4，否则运行时抛出异常。</span>\n  <span class=\"hljs-comment\">// 如果未配置，默认为 2</span>\n  <span class=\"hljs-meta\">@Value</span>({ <span class=\"hljs-attr\">default</span>: <span class=\"hljs-number\">2</span> })\n  <span class=\"hljs-meta\">@Max</span>(<span class=\"hljs-number\">4</span>)\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-attr\">workers</span>: <span class=\"hljs-built_in\">number</span>;\n\n  <span class=\"hljs-comment\">// 必须配置，且长度不能大于64.</span>\n  <span class=\"hljs-meta\">@Value</span>()\n  <span class=\"hljs-meta\">@MaxLength</span>(<span class=\"hljs-number\">64</span>)\n  <span class=\"hljs-meta\">@Required</span>()\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-attr\">msg</span>: <span class=\"hljs-built_in\">string</span>;\n\n  <span class=\"hljs-comment\">// 配置是一个负责对象数组，类型和验证规则声明在对象的类上。</span>\n  <span class=\"hljs-meta\">@Value</span>()\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-attr\">routes</span>: <span class=\"hljs-title class_\">Route</span>[];\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Route</span> {\n  <span class=\"hljs-meta\">@Required</span>()\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-attr\">path</span>: <span class=\"hljs-built_in\">string</span>;\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-attr\">extract</span>: <span class=\"hljs-built_in\">boolean</span>;\n}\n</code></pre>\n"},{"title":"JOY 配置","path":"/docs/basic/joy-config","hasMenu":false,"htmlContent":"<h1 id=\"joy-配置\">JOY 配置</h1>\n<h2 id=\"basepath\">basePath</h2>\n<p>类型：<code>string</code> 默认值：<code>&quot;&quot;</code></p>\n<p>发布 Joy 应用到子路径下时，使用<code>basePath</code>设置子路径名称。 例如我们开发了一个文档应用，现将它发布到<code>/docs</code>子路径下，例如<code>www.mydomian.com/docs</code>。</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-comment\">// config/config.production.ts</span>\n<span class=\"hljs-comment\">// 只配置 production 环境</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-attr\">basePath</span>: <span class=\"hljs-string\">&quot;/docs&quot;</span>,\n};\n</code></pre>\n<blockquote>\n<p>注意：该配置值在构建编译时设置，会打包到客户端的运行包中，如果修改该值，需要重新编译。</p>\n</blockquote>\n<h2 id=\"assetprefix\">assetPrefix</h2>\n<p>类型：string，默认:<code>&quot;&quot;</code></p>\n<p>在浏览器上运行时，加载应用资源的路径前缀。一般是在生产环境，将打包好的静态资源部署到不同的服务器（CDN，静态文件服务器）上时配置该值，而开发调试环境无需配置。 例如图片默认路径是<code>${basePath}/static/logo.png</code>，假如我们将资源部署到 CDN 上，图片的加载路径变为 CDN 的地址<code>https://cdn.mydomain.com/myapp/static/logo.png</code> ,此时我们更改<code>assetPrefix</code>为 CDN 的地址：</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-comment\">// config/config.production.ts</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-attr\">assetPrefix</span>: <span class=\"hljs-string\">&quot;https://cdn.mydomain.com/myapp&quot;</span>,\n};\n</code></pre>\n<h2 id=\"distdir\">distDir</h2>\n<p>类型：<code>string</code>，默认: <code>&quot;.joy&quot;</code></p>\n<p>编译阶段输出的临时目录，你也可以设置自定义的目录名称。</p>\n"}]},{"title":"应用目录","path":"/docs/dir-tree","hasMenu":false,"htmlContent":"<h1 id=\"应用目录\">应用目录</h1>\n<pre><code class=\"hljs language-yaml\">    <span class=\"hljs-string\">myapp</span>\n        <span class=\"hljs-string\">src</span> <span class=\"hljs-comment\"># 源代码目录</span>\n            <span class=\"hljs-string\">client</span>  <span class=\"hljs-string\">--客户端代码</span>\n                <span class=\"hljs-string\">pages</span>    <span class=\"hljs-comment\"># 约定React路由目录</span>\n                <span class=\"hljs-string\">models</span>    <span class=\"hljs-comment\"># ReactModel目录</span>\n                <span class=\"hljs-string\">components</span>  <span class=\"hljs-comment\"># React组件</span>\n            <span class=\"hljs-string\">server</span>  <span class=\"hljs-string\">--服务端代码</span>\n                <span class=\"hljs-string\">controllers</span>\n                <span class=\"hljs-string\">services</span>\n        <span class=\"hljs-string\">config</span>  <span class=\"hljs-comment\"># 配置目录</span>\n            <span class=\"hljs-string\">config.ts</span>\n        <span class=\"hljs-string\">public</span>  <span class=\"hljs-comment\"># 静态公共目录</span>\n            <span class=\"hljs-string\">logo.png</span>\n</code></pre>\n"},{"title":"CSS 样式","path":"/docs/style-css","hasMenu":false,"htmlContent":"<h1 id=\"css-样式\">CSS 样式</h1>\n<h2 id=\"应用全局样式\">应用全局样式</h2>\n<p>Joy 中约定在 <code>src/global.css</code>（或<code>global.less</code> <code>global.sass</code> ）中定义全局样式，应用启动时会自动加载该样式。</p>\n<p>比如我们给应用统一设置全局样式，或者覆盖组件样式，新建文件 <code>src/global.css</code>:</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">body</span> {\n  <span class=\"hljs-attribute\">font-family</span>: BlinkMacSystemFont, PingFang SC, Microsoft YaHei, sans-serif;\n  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">14px</span>;\n  <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">20px</span> <span class=\"hljs-number\">20px</span> <span class=\"hljs-number\">60px</span>;\n}\n\n<span class=\"hljs-selector-class\">.addButton</span> {\n  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">60px</span>;\n}\n</code></pre>\n<h2 id=\"css-模块导入\">CSS 模块导入</h2>\n<p>Joy 会对导入的 CSS 文件自动识别是否使用 CSS Modules 导入.</p>\n<h3 id=\"css-modules-导入\">CSS Modules 导入</h3>\n<p><a href=\"https://github.com/css-modules/css-modules\">CSS Modules</a> 会将 css 文件内的 class 名称生成唯一的标识，从而避免不同 css 模块类相同 class 名称的冲突。 通常使用 CSS Modules 来定义组件样式，而不用担心和组件间以及全局样式的冲突。</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// CSS Modules</span>\n<span class=\"hljs-keyword\">import</span> styles <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./foo.css&quot;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Button</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">{styles.btnAdd}</span>&gt;</span>Add<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span>;\n}\n</code></pre>\n<p>在 CSS Modules 中，也可以通过<code>:global { }</code>包裹方式，临时插入全局类样式，被包裹中的代码中定义的 CSS 类名，将不会被 CSS Modules 处理，直接输出到页面。\n例如我们自定义 header 中的菜单组件样式：</p>\n<pre><code class=\"hljs language-less\"><span class=\"hljs-comment\">// main-layout.less</span>\n<span class=\"hljs-selector-class\">.appHeader</span> {\n  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">64px</span>;\n\n  :<span class=\"hljs-selector-tag\">global</span> {\n    <span class=\"hljs-selector-class\">.ant-menu</span> {\n      <span class=\"hljs-comment\">// ant-menu 是 antd &lt;Menu /&gt; 组件中的常量类名。</span>\n      <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">0</span>;\n    }\n  }\n}\n</code></pre>\n<h3 id=\"全局样式导入\">全局样式导入</h3>\n<p>非 CSS Modules 方式导入，css 文件内定义的类样式为全局样式，将会控制页面中所有满足条件的 DOM 元素。</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 非 CSS Modules</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;./foo.css&quot;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Button</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;btnAdd&quot;</span>&gt;</span>New<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span>;\n}\n\n<span class=\"hljs-comment\">// 非 CSS Modules, bar.css内定义的样式为全局样式，将会控制页面中所有满足条件的DOM元素。</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;./bar.css&quot;</span>;\n</code></pre>\n<h2 id=\"使用-less\">使用 LESS</h2>\n<p>Joy 原生支持 Less，使用 <code>.less</code> 后缀名定义 Less 文件。在使用 Less 之前，需要先安装 <a href=\"https://github.com/less/less.js\">less</a>:</p>\n<pre><code class=\"hljs language-bash\">npm install less\n</code></pre>\n<h3 id=\"自定义-less-配置\">自定义 LESS 配置</h3>\n<p>在 <code>joy.config.js</code> 的 <code>lessOptions</code> 字段中定义 Less 的自定义配置, 具体可配置项参考 <a href=\"https://webpack.js.org/loaders/less-loader/\">less-loader</a> 的配置。</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;path&quot;</span>);\n\n<span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = {\n  <span class=\"hljs-attr\">lessOptions</span>: {\n    <span class=\"hljs-attr\">strictMath</span>: <span class=\"hljs-literal\">true</span>,\n  },\n};\n</code></pre>\n<h2 id=\"使用-sass\">使用 Sass</h2>\n<p>Joy 原生支持 Sass，使用 <code>.scss</code> 或 <code>.sass</code> 后缀名定义 Sass 文件，在使用 Sass 之前，需要先安装 <a href=\"https://github.com/sass/sass\">sass</a> :</p>\n<pre><code class=\"hljs language-bash\">npm install sass\n</code></pre>\n<blockquote>\n<p>Sass 支持 2 种语法格式定义来样式，<code>.scss</code>文件使用<a href=\"https://sass-lang.com/documentation/syntax#scss\">SCSS 语法</a> ，<code>.sass</code>文件使用 <a href=\"https://sass-lang.com/documentation/syntax#the-indented-syntax\">Indented Syntax (&quot;Sass&quot;)</a> 语法。\n如果你不确定使用哪种语法，可首先采用<code>.scss</code>，它是 CSS 的扩展，可使用 CSS 的全部语法，不需要学习新的 Indented Syntax 缩进语法。</p>\n</blockquote>\n<h3 id=\"自定义-sass-配置\">自定义 Sass 配置</h3>\n<p>在 <code>joy.config.js</code> 的 <code>sassOptions</code> 字段中定义 Sass 的自定义配置, 具体可配置项参考 <a href=\"https://webpack.js.org/loaders/sass-loader/\">sass-loader</a> 的配置。</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;path&quot;</span>);\n\n<span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = {\n  <span class=\"hljs-attr\">sassOptions</span>: {\n    <span class=\"hljs-attr\">additionalData</span>: <span class=\"hljs-string\">&quot;$env: &quot;</span> + process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">NODE_ENV</span> + <span class=\"hljs-string\">&quot;;&quot;</span>,\n    <span class=\"hljs-attr\">indentWidth</span>: <span class=\"hljs-number\">4</span>,\n    <span class=\"hljs-attr\">includePaths</span>: [<span class=\"hljs-string\">&quot;/absolute/path/a&quot;</span>, <span class=\"hljs-string\">&quot;/absolute/path/b&quot;</span>],\n  },\n};\n</code></pre>\n<h3 id=\"sass-变量\">Sass 变量</h3>\n<p>Joy 支持 Sass 变量从 CSS Module 文件中导出。比如导出<code>primaryColor</code>变量：</p>\n<pre><code class=\"hljs language-scss\"><span class=\"hljs-comment\">/* index-scss-variables.scss */</span>\n<span class=\"hljs-variable\">$primary-color</span>: <span class=\"hljs-number\">#ff0000</span>;\n\n:export {\n  primaryColor: <span class=\"hljs-variable\">$primary-color</span>;\n}\n</code></pre>\n<pre><code class=\"hljs language-tsx\"><span class=\"hljs-comment\">// index-scss-variables.js</span>\n<span class=\"hljs-keyword\">import</span> variables <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;../index-scss-variables.scss&quot;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">MyApp</span>(<span class=\"hljs-params\">{ Component, pageProps }</span>) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{</span> <span class=\"hljs-attr\">color:</span> <span class=\"hljs-attr\">variables.primaryColor</span> }}&gt;</span>Hello<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>;\n}\n</code></pre>\n<h2 id=\"todo\">todo</h2>\n<ul>\n<li>自定义 PostCss <a href=\"https://nextjs.org/docs/advanced-features/customizing-postcss-config\">https://nextjs.org/docs/advanced-features/customizing-postcss-config</a></li>\n</ul>\n"}]},{"title":"start","path":"/docs/start","children":[{"title":"Hello Joy","path":"/docs/introduce","hasMenu":false,"htmlContent":"<h1 id=\"hello-joy\">Hello Joy</h1>\n<hr>\n<p>fdfdsfas</p>\n"}]}],"defaultOption":["/docs/advanced-features","/docs/basic","/docs/basic/config","/docs/start"]}},{"type":"docsModel/__SET_STATE","state":{"loadingCurrentDoc":true}},{"type":"docsModel/__SET_STATE","state":{"currentDoc":{"title":"自定义 App","path":"/docs/custom-app","file":"docs/advanced-features/custom-app.md","hasMenu":false,"htmlContent":"<h1 id=\"自定义-app\">自定义 App</h1>\n<p>Joy 使用<code>App</code>来包装和初始化整个界面，我们可以自定它来控制页面的初始化，例如：</p>\n<ul>\n<li>添加所有页面共有的布局。</li>\n<li>捕获渲染错误，使用<code>componentDidCatch</code>。</li>\n<li>修改路由或者路由的渲染方式。</li>\n<li>添加全局样式。</li>\n</ul>\n<p>我们开始覆盖默认的<code>App</code>， 创建文件<code>./src/pages/_app.tsx</code>，修改其内容：</p>\n<pre><code class=\"hljs language-tsx\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;\n<span class=\"hljs-keyword\">import</span> { IReactApplication, <span class=\"hljs-title class_\">ReactRouter</span>, <span class=\"hljs-title class_\">RouteSwitch</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;@symph/react&quot;</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">ReactAppProps</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;@symph/joy&quot;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span>&lt;<span class=\"hljs-title class_\">ReactAppProps</span>, <span class=\"hljs-built_in\">any</span>&gt; {\n  <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-attr\">reactRouter</span>: <span class=\"hljs-title class_\">ReactRouter</span>;\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">props: ReactAppProps, context?: <span class=\"hljs-built_in\">any</span></span>) {\n    <span class=\"hljs-variable language_\">super</span>(props, context);\n    <span class=\"hljs-keyword\">const</span> appContext = props.<span class=\"hljs-property\">appContext</span>;\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">reactRouter</span> = appContext.<span class=\"hljs-property\">getSync</span>&lt;<span class=\"hljs-title class_\">ReactRouter</span>&gt;(<span class=\"hljs-string\">&quot;reactRouter&quot;</span>);\n  }\n  <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">const</span> routes = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">reactRouter</span>.<span class=\"hljs-title function_\">getRoutes</span>() || [];\n    <span class=\"hljs-keyword\">return</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">RouteSwitch</span> <span class=\"hljs-attr\">routes</span>=<span class=\"hljs-string\">{routes}</span> <span class=\"hljs-attr\">extraProps</span>=<span class=\"hljs-string\">{{}}</span> /&gt;</span></span>;\n  }\n}\n</code></pre>\n<p><code>App</code> 的<code>props</code>中包含了<code>IReactApplication</code>实例，我们可以通过它获取到整个 React 应用的业务组件，例如上面例子中的<code>reactRouter</code>路由组件。\n<code>render()</code>中使用的<code>RouteSwitch</code>组件来渲染应用中注册的路由，包括文件约定路由。</p>\n<h2 id=\"注意事项：\">注意事项：</h2>\n<ul>\n<li>如果你的应用正在开发模式下运行中，首次添加<code>./src/pages/_app.js</code>文件，需要重新启动开发服务器。</li>\n<li><code>App</code>在服务端和浏览器上都会被渲染，所以不能在这里使用<code>Node.js</code>特有的 API。</li>\n</ul>\n"},"titleTrees":[{"type":"heading","raw":"## 注意事项：\n\n","depth":2,"text":"注意事项：","tokens":[{"type":"text","raw":"注意事项：","text":"注意事项："}],"id":"#注意事项："}],"loadingCurrentDoc":false}},{"type":"reactAppInitManager/__SET_STATE","state":{"/docs/docs/custom-app":{"initStatic":2,"init":0}}}]