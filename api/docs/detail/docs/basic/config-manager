{"data":{"title":"配置","path":"/docs/basic/config-manager","file":"docs/basic/config/config-manager.md","hasMenu":false,"htmlContent":"<h1 id=\"配置\">配置</h1>\n<p>Joy 遵循约定大于配置原则，参考最佳实践约定默认配置，0 配置也可启动应用，即新应用无需配置文件也可立即运行和发布。</p>\n<h2 id=\"配置文件\">配置文件</h2>\n<p>Joy 在<code>joy.config.ts</code>或者<code>config/config.ts</code>中配置项目，支持 ts、js、json、es6 文件格式。例如：</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-comment\">// joy.config.ts</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-attr\">basePath</span>: <span class=\"hljs-string\">&quot;&quot;</span>,\n  <span class=\"hljs-attr\">apiPrefix</span>: <span class=\"hljs-string\">&quot;/api&quot;</span>,\n  <span class=\"hljs-attr\">ssr</span>: <span class=\"hljs-literal\">true</span>,\n};\n</code></pre>\n<p>如果项目的配置不复杂，推荐在 <code>joy.config.ts</code> 中写配置; 如果项目的配置比较复杂，可以将配置写在 config/config.ts 中，并把配置的一部分拆分出去，加载配置时会自动合并到主配置中，例如路由配置可以拆分成单独的 routes.ts：</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-comment\">// config/routes.ts</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> [{ <span class=\"hljs-attr\">exact</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&quot;/&quot;</span>, <span class=\"hljs-attr\">component</span>: <span class=\"hljs-string\">&quot;index&quot;</span> }];\n</code></pre>\n<p>等同于：</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-comment\">// joy.config.ts</span>\n{\n  <span class=\"hljs-attr\">apiPrefix</span>: <span class=\"hljs-string\">&quot;/api&quot;</span>;\n  <span class=\"hljs-attr\">routes</span>: [{ <span class=\"hljs-attr\">exact</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&quot;/&quot;</span>, <span class=\"hljs-attr\">component</span>: <span class=\"hljs-string\">&quot;index&quot;</span> }];\n}\n</code></pre>\n<h2 id=\"多环境配置\">多环境配置</h2>\n<p>可以通过环境变量<code>NODE_ENV</code>或者<code>JOY_ENV</code>来区分不同环境配置，<code>JOY_ENV</code>的优先级更高。各环境配置文件，统一放在<code>/config</code>目录中，例如：<code>/config/config.beta.ts</code>、<code>/config/config.production.ts</code>。</p>\n<p>各配置的加载顺序：<code>.env</code> ➡ <code>joy.config.ts</code> ➡ <code>config/config.ts</code> ➡ <code>config/config.production.ts</code> ， 后加载的配置会覆盖之前的配置。</p>\n<h2 id=\"本地临时配置\">本地临时配置</h2>\n<p>可以新建 <code>config/config.local.ts</code>文件，例如该配置文件存在，则加载顺序为：\n<code>.env</code> ➡ <code>joy.config.ts</code> ➡ <code>config/config.ts</code> ➡ <code>config/config.development.ts</code> ➡ <code>config/config.local.ts</code> 。</p>\n<p><strong>注意：</strong></p>\n<ul>\n<li>该配置优先级最高，在最后加载该配置文件，且会覆盖之前读取的配置。</li>\n<li><code>config.local.ts</code> 是本地开发调试的临时配置，请将其添加到 <code>.gitignore</code>，<strong>务必不要提交到 git 仓库中</strong></li>\n</ul>\n<h2 id=\"环境变量配置\">环境变量配置</h2>\n<h3 id=\"执行命令时添加环境变量\">执行命令时添加环境变量</h3>\n<p>例如：</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-comment\"># OS X、 Linux</span>\n$ port=3000 joy dev\n\n<span class=\"hljs-comment\"># Windows</span>\n$ <span class=\"hljs-built_in\">set</span> port=3000&amp;&amp;joy dev\n</code></pre>\n<p>如果要同时考虑 OS X 和 Windows，可借助三方工具 cross-env。</p>\n<pre><code class=\"hljs language-bash\">$ yarn add cross-env --dev\n$ cross-env port=3000 umi dev\n</code></pre>\n<h3 id=\"env-配置文件\">.env 配置文件</h3>\n<p>Joy 约定根目录下的<code>.env</code>为环境变量配置文件，该配置文件将在初始化配置时加载，其配置的值于 <a href=\"#%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4%E6%97%B6%E6%B7%BB%E5%8A%A0%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F\">执行命令时添加环境变量</a></p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-comment\">// .env</span>\n\nport = <span class=\"hljs-number\">3000</span>;\nhostname = <span class=\"hljs-string\">&quot;localhost&quot;</span>;\n</code></pre>\n<h2 id=\"应用内获取配置\">应用内获取配置</h2>\n<h3 id=\"通过-configservice-服务获取\">通过 ConfigService 服务获取</h3>\n<p><code>@symph/config</code>提供 <code>ConfigService</code>服务类，Joy 已内置该服务，通过其提供的<code>get&lt;T = any&gt;(configPath?:string, defaultValue?: T): T | undefined</code>方法获取配置值，方法参数：</p>\n<ul>\n<li>configPath: 配置键值，支持 object path，获取配置值对象的内部值。</li>\n<li>defaultValue: 默认值，如果配置不存在，则返回默认值。</li>\n</ul>\n<p>例如有以下配置内容：</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-comment\">// joy.config.ts</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-attr\">database</span>: {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;mysql&quot;</span>,\n    <span class=\"hljs-attr\">host</span>: <span class=\"hljs-string\">&quot;localhost&quot;</span>,\n    <span class=\"hljs-attr\">port</span>: <span class=\"hljs-number\">3306</span>,\n  },\n};\n</code></pre>\n<p>在服务类中获取以上配置值：</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">ConfigService</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;@symph/config&quot;</span>;\n\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Component</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;@symph/core&quot;</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Value</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;@symph/config&quot;</span>;\n\n<span class=\"hljs-meta\">@Component</span>()\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HelloService</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">private</span> configService: ConfigService</span>) {\n    <span class=\"hljs-comment\">// 通过 configKey 获取 配置</span>\n    <span class=\"hljs-keyword\">const</span> database = configService.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">&quot;database&quot;</span>);\n\n    <span class=\"hljs-comment\">// 如果配置值是一个对象，可以通过object path，获取获取对象内部属性的值</span>\n    <span class=\"hljs-keyword\">const</span> host = configService.<span class=\"hljs-property\">get</span>&lt;<span class=\"hljs-built_in\">string</span>&gt;(<span class=\"hljs-string\">&quot;database.host&quot;</span>, <span class=\"hljs-string\">&quot;localhost&quot;</span>);\n  }\n}\n</code></pre>\n<h3 id=\"value-装饰器方式获取\">@Value 装饰器方式获取</h3>\n<p>在组件的属性上，通过<code>@Value(options)</code>装饰器申明需要自动注入配置，注入的属性键值默认为组件的属性名称，例如：</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Component</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;@symph/core&quot;</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Value</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;@symph/config&quot;</span>;\n\n<span class=\"hljs-meta\">@Component</span>()\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HelloService</span> {\n  <span class=\"hljs-comment\">// 读取joy.config.ts中配置的msg的值。</span>\n  <span class=\"hljs-meta\">@Value</span>()\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-attr\">msg</span>: <span class=\"hljs-built_in\">string</span>;\n}\n</code></pre>\n<p><code>@Value(options)</code> 定制参数列表：</p>\n<ul>\n<li><strong>configKey</strong> 类型<code>string</code>，默认等于被装饰的属性名称，指定注入是取的配置文件中的键值，由此属性名称和配置文件中的键值可以不相等。</li>\n<li><strong>schema</strong> 类型<code>json-schema</code>，自定义 <a href=\"https://json-schema.org/learn/getting-started-step-by-step\">json-schema</a> 定义属性规则，不推荐直接使用该属性，大部分情况下可使用<code>@tsed/schema</code>库提供的装饰器来申明校验规则，例如<code>@Max(3)</code>申明该配置的值不能大于 4，否则运行是抛出异常。</li>\n</ul>\n<ul>\n<li><strong>transform</strong> 类型<code>(configValue: any) =&gt; any</code>, 注入值时被调用，入参为配置文件中的值，返回值为转换后的值，然后将转化后的值设置到属性上。</li>\n</ul>\n<blockquote>\n<p><code>@Value()</code>声明的属性，也等于声明了一个配置项及其类型和验证规则，需要避免在不同地方声明相同的配置但又不兼容的类型，这种情况下，我们可以将声明移动到一个独立的配置类中，其它地方如果需要使用该配置，应该依赖和使用该类。</p>\n</blockquote>\n<h4 id=\"校验配置值\">校验配置值</h4>\n<p>使用<code>@tsed/schema</code>库提供的装饰器来申明校验规则。</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Component</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;@symph/core&quot;</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Max</span>, <span class=\"hljs-title class_\">MaxLength</span>, <span class=\"hljs-title class_\">Required</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;@tsed/schema&quot;</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Value</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;@symph/config&quot;</span>;\n\n<span class=\"hljs-meta\">@Component</span>()\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BasicConfig</span> {\n  <span class=\"hljs-comment\">// 配置类型为number，且不能大于4，否则运行时抛出异常。</span>\n  <span class=\"hljs-comment\">// 如果未配置，默认为 2</span>\n  <span class=\"hljs-meta\">@Value</span>({ <span class=\"hljs-attr\">default</span>: <span class=\"hljs-number\">2</span> })\n  <span class=\"hljs-meta\">@Max</span>(<span class=\"hljs-number\">4</span>)\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-attr\">workers</span>: <span class=\"hljs-built_in\">number</span>;\n\n  <span class=\"hljs-comment\">// 必须配置，且长度不能大于64.</span>\n  <span class=\"hljs-meta\">@Value</span>()\n  <span class=\"hljs-meta\">@MaxLength</span>(<span class=\"hljs-number\">64</span>)\n  <span class=\"hljs-meta\">@Required</span>()\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-attr\">msg</span>: <span class=\"hljs-built_in\">string</span>;\n\n  <span class=\"hljs-comment\">// 配置是一个负责对象数组，类型和验证规则声明在对象的类上。</span>\n  <span class=\"hljs-meta\">@Value</span>()\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-attr\">routes</span>: <span class=\"hljs-title class_\">Route</span>[];\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Route</span> {\n  <span class=\"hljs-meta\">@Required</span>()\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-attr\">path</span>: <span class=\"hljs-built_in\">string</span>;\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-attr\">extract</span>: <span class=\"hljs-built_in\">boolean</span>;\n}\n</code></pre>\n"},"treeData":[{"type":"heading","raw":"## 配置文件\n\n","depth":2,"text":"配置文件","tokens":[{"type":"text","raw":"配置文件","text":"配置文件"}],"id":"#配置文件"},{"type":"heading","raw":"## 多环境配置\n\n","depth":2,"text":"多环境配置","tokens":[{"type":"text","raw":"多环境配置","text":"多环境配置"}],"id":"#多环境配置"},{"type":"heading","raw":"## 本地临时配置\n\n","depth":2,"text":"本地临时配置","tokens":[{"type":"text","raw":"本地临时配置","text":"本地临时配置"}],"id":"#本地临时配置"},{"type":"heading","raw":"## 环境变量配置\n\n","depth":2,"text":"环境变量配置","tokens":[{"type":"text","raw":"环境变量配置","text":"环境变量配置"}],"id":"#环境变量配置","children":[{"type":"heading","raw":"### 执行命令时添加环境变量\n\n","depth":3,"text":"执行命令时添加环境变量","tokens":[{"type":"text","raw":"执行命令时添加环境变量","text":"执行命令时添加环境变量"}],"id":"#执行命令时添加环境变量"},{"type":"heading","raw":"### .env 配置文件\n\n","depth":3,"text":".env 配置文件","tokens":[{"type":"text","raw":".env 配置文件","text":".env 配置文件"}],"id":"#.env-配置文件"}]},{"type":"heading","raw":"## 应用内获取配置\n\n","depth":2,"text":"应用内获取配置","tokens":[{"type":"text","raw":"应用内获取配置","text":"应用内获取配置"}],"id":"#应用内获取配置","children":[{"type":"heading","raw":"### 通过 ConfigService 服务获取\n\n","depth":3,"text":"通过 ConfigService 服务获取","tokens":[{"type":"text","raw":"通过 ConfigService 服务获取","text":"通过 ConfigService 服务获取"}],"id":"#通过-configservice-服务获取"},{"type":"heading","raw":"### @Value 装饰器方式获取\n\n","depth":3,"text":"@Value 装饰器方式获取","tokens":[{"type":"text","raw":"@Value 装饰器方式获取","text":"@Value 装饰器方式获取"}],"id":"#@value-装饰器方式获取"}]}]}