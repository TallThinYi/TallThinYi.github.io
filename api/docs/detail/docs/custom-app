{"data":{"title":"自定义 App","path":"/docs/custom-app","file":"docs/advanced-features/custom-app.md","hasMenu":false,"htmlContent":"<h1 id=\"自定义-app\">自定义 App</h1>\n<p>Joy 使用<code>App</code>来包装和初始化整个界面，我们可以自定它来控制页面的初始化，例如：</p>\n<ul>\n<li>添加所有页面共有的布局。</li>\n<li>捕获渲染错误，使用<code>componentDidCatch</code>。</li>\n<li>修改路由或者路由的渲染方式。</li>\n<li>添加全局样式。</li>\n</ul>\n<p>我们开始覆盖默认的<code>App</code>， 创建文件<code>./src/pages/_app.tsx</code>，修改其内容：</p>\n<pre><code class=\"hljs language-tsx\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;\n<span class=\"hljs-keyword\">import</span> { IReactApplication, <span class=\"hljs-title class_\">ReactRouter</span>, <span class=\"hljs-title class_\">RouteSwitch</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;@symph/react&quot;</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">ReactAppProps</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;@symph/joy&quot;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span>&lt;<span class=\"hljs-title class_\">ReactAppProps</span>, <span class=\"hljs-built_in\">any</span>&gt; {\n  <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-attr\">reactRouter</span>: <span class=\"hljs-title class_\">ReactRouter</span>;\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">props: ReactAppProps, context?: <span class=\"hljs-built_in\">any</span></span>) {\n    <span class=\"hljs-variable language_\">super</span>(props, context);\n    <span class=\"hljs-keyword\">const</span> appContext = props.<span class=\"hljs-property\">appContext</span>;\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">reactRouter</span> = appContext.<span class=\"hljs-property\">getSync</span>&lt;<span class=\"hljs-title class_\">ReactRouter</span>&gt;(<span class=\"hljs-string\">&quot;reactRouter&quot;</span>);\n  }\n  <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">const</span> routes = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">reactRouter</span>.<span class=\"hljs-title function_\">getRoutes</span>() || [];\n    <span class=\"hljs-keyword\">return</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">RouteSwitch</span> <span class=\"hljs-attr\">routes</span>=<span class=\"hljs-string\">{routes}</span> <span class=\"hljs-attr\">extraProps</span>=<span class=\"hljs-string\">{{}}</span> /&gt;</span></span>;\n  }\n}\n</code></pre>\n<p><code>App</code> 的<code>props</code>中包含了<code>IReactApplication</code>实例，我们可以通过它获取到整个 React 应用的业务组件，例如上面例子中的<code>reactRouter</code>路由组件。\n<code>render()</code>中使用的<code>RouteSwitch</code>组件来渲染应用中注册的路由，包括文件约定路由。</p>\n<h2 id=\"注意事项：\">注意事项：</h2>\n<ul>\n<li>如果你的应用正在开发模式下运行中，首次添加<code>./src/pages/_app.js</code>文件，需要重新启动开发服务器。</li>\n<li><code>App</code>在服务端和浏览器上都会被渲染，所以不能在这里使用<code>Node.js</code>特有的 API。</li>\n</ul>\n"},"treeData":[{"type":"heading","raw":"## 注意事项：\n\n","depth":2,"text":"注意事项：","tokens":[{"type":"text","raw":"注意事项：","text":"注意事项："}],"id":"#注意事项："}]}