{"data":{"title":"CSS 样式","path":"/docs/style-css","file":"docs/basic/style-css.md","hasMenu":false,"htmlContent":"<h1 id=\"css-样式\">CSS 样式</h1>\n<h2 id=\"应用全局样式\">应用全局样式</h2>\n<p>Joy 中约定在 <code>src/global.css</code>（或<code>global.less</code> <code>global.sass</code> ）中定义全局样式，应用启动时会自动加载该样式。</p>\n<p>比如我们给应用统一设置全局样式，或者覆盖组件样式，新建文件 <code>src/global.css</code>:</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">body</span> {\n  <span class=\"hljs-attribute\">font-family</span>: BlinkMacSystemFont, PingFang SC, Microsoft YaHei, sans-serif;\n  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">14px</span>;\n  <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">20px</span> <span class=\"hljs-number\">20px</span> <span class=\"hljs-number\">60px</span>;\n}\n\n<span class=\"hljs-selector-class\">.addButton</span> {\n  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">60px</span>;\n}\n</code></pre>\n<h2 id=\"css-模块导入\">CSS 模块导入</h2>\n<p>Joy 会对导入的 CSS 文件自动识别是否使用 CSS Modules 导入.</p>\n<h3 id=\"css-modules-导入\">CSS Modules 导入</h3>\n<p><a href=\"https://github.com/css-modules/css-modules\">CSS Modules</a> 会将 css 文件内的 class 名称生成唯一的标识，从而避免不同 css 模块类相同 class 名称的冲突。 通常使用 CSS Modules 来定义组件样式，而不用担心和组件间以及全局样式的冲突。</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// CSS Modules</span>\n<span class=\"hljs-keyword\">import</span> styles <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./foo.css&quot;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Button</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">{styles.btnAdd}</span>&gt;</span>Add<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span>;\n}\n</code></pre>\n<p>在 CSS Modules 中，也可以通过<code>:global { }</code>包裹方式，临时插入全局类样式，被包裹中的代码中定义的 CSS 类名，将不会被 CSS Modules 处理，直接输出到页面。\n例如我们自定义 header 中的菜单组件样式：</p>\n<pre><code class=\"hljs language-less\"><span class=\"hljs-comment\">// main-layout.less</span>\n<span class=\"hljs-selector-class\">.appHeader</span> {\n  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">64px</span>;\n\n  :<span class=\"hljs-selector-tag\">global</span> {\n    <span class=\"hljs-selector-class\">.ant-menu</span> {\n      <span class=\"hljs-comment\">// ant-menu 是 antd &lt;Menu /&gt; 组件中的常量类名。</span>\n      <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">0</span>;\n    }\n  }\n}\n</code></pre>\n<h3 id=\"全局样式导入\">全局样式导入</h3>\n<p>非 CSS Modules 方式导入，css 文件内定义的类样式为全局样式，将会控制页面中所有满足条件的 DOM 元素。</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 非 CSS Modules</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;./foo.css&quot;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Button</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;btnAdd&quot;</span>&gt;</span>New<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span>;\n}\n\n<span class=\"hljs-comment\">// 非 CSS Modules, bar.css内定义的样式为全局样式，将会控制页面中所有满足条件的DOM元素。</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;./bar.css&quot;</span>;\n</code></pre>\n<h2 id=\"使用-less\">使用 LESS</h2>\n<p>Joy 原生支持 Less，使用 <code>.less</code> 后缀名定义 Less 文件。在使用 Less 之前，需要先安装 <a href=\"https://github.com/less/less.js\">less</a>:</p>\n<pre><code class=\"hljs language-bash\">npm install less\n</code></pre>\n<h3 id=\"自定义-less-配置\">自定义 LESS 配置</h3>\n<p>在 <code>joy.config.js</code> 的 <code>lessOptions</code> 字段中定义 Less 的自定义配置, 具体可配置项参考 <a href=\"https://webpack.js.org/loaders/less-loader/\">less-loader</a> 的配置。</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;path&quot;</span>);\n\n<span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = {\n  <span class=\"hljs-attr\">lessOptions</span>: {\n    <span class=\"hljs-attr\">strictMath</span>: <span class=\"hljs-literal\">true</span>,\n  },\n};\n</code></pre>\n<h2 id=\"使用-sass\">使用 Sass</h2>\n<p>Joy 原生支持 Sass，使用 <code>.scss</code> 或 <code>.sass</code> 后缀名定义 Sass 文件，在使用 Sass 之前，需要先安装 <a href=\"https://github.com/sass/sass\">sass</a> :</p>\n<pre><code class=\"hljs language-bash\">npm install sass\n</code></pre>\n<blockquote>\n<p>Sass 支持 2 种语法格式定义来样式，<code>.scss</code>文件使用<a href=\"https://sass-lang.com/documentation/syntax#scss\">SCSS 语法</a> ，<code>.sass</code>文件使用 <a href=\"https://sass-lang.com/documentation/syntax#the-indented-syntax\">Indented Syntax (&quot;Sass&quot;)</a> 语法。\n如果你不确定使用哪种语法，可首先采用<code>.scss</code>，它是 CSS 的扩展，可使用 CSS 的全部语法，不需要学习新的 Indented Syntax 缩进语法。</p>\n</blockquote>\n<h3 id=\"自定义-sass-配置\">自定义 Sass 配置</h3>\n<p>在 <code>joy.config.js</code> 的 <code>sassOptions</code> 字段中定义 Sass 的自定义配置, 具体可配置项参考 <a href=\"https://webpack.js.org/loaders/sass-loader/\">sass-loader</a> 的配置。</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;path&quot;</span>);\n\n<span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = {\n  <span class=\"hljs-attr\">sassOptions</span>: {\n    <span class=\"hljs-attr\">additionalData</span>: <span class=\"hljs-string\">&quot;$env: &quot;</span> + process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">NODE_ENV</span> + <span class=\"hljs-string\">&quot;;&quot;</span>,\n    <span class=\"hljs-attr\">indentWidth</span>: <span class=\"hljs-number\">4</span>,\n    <span class=\"hljs-attr\">includePaths</span>: [<span class=\"hljs-string\">&quot;/absolute/path/a&quot;</span>, <span class=\"hljs-string\">&quot;/absolute/path/b&quot;</span>],\n  },\n};\n</code></pre>\n<h3 id=\"sass-变量\">Sass 变量</h3>\n<p>Joy 支持 Sass 变量从 CSS Module 文件中导出。比如导出<code>primaryColor</code>变量：</p>\n<pre><code class=\"hljs language-scss\"><span class=\"hljs-comment\">/* index-scss-variables.scss */</span>\n<span class=\"hljs-variable\">$primary-color</span>: <span class=\"hljs-number\">#ff0000</span>;\n\n:export {\n  primaryColor: <span class=\"hljs-variable\">$primary-color</span>;\n}\n</code></pre>\n<pre><code class=\"hljs language-tsx\"><span class=\"hljs-comment\">// index-scss-variables.js</span>\n<span class=\"hljs-keyword\">import</span> variables <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;../index-scss-variables.scss&quot;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">MyApp</span>(<span class=\"hljs-params\">{ Component, pageProps }</span>) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{</span> <span class=\"hljs-attr\">color:</span> <span class=\"hljs-attr\">variables.primaryColor</span> }}&gt;</span>Hello<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>;\n}\n</code></pre>\n<h2 id=\"todo\">todo</h2>\n<ul>\n<li>自定义 PostCss <a href=\"https://nextjs.org/docs/advanced-features/customizing-postcss-config\">https://nextjs.org/docs/advanced-features/customizing-postcss-config</a></li>\n</ul>\n"},"treeData":[{"type":"heading","raw":"## 应用全局样式\n\n","depth":2,"text":"应用全局样式","tokens":[{"type":"text","raw":"应用全局样式","text":"应用全局样式"}],"id":"#应用全局样式"},{"type":"heading","raw":"## CSS 模块导入\n\n","depth":2,"text":"CSS 模块导入","tokens":[{"type":"text","raw":"CSS 模块导入","text":"CSS 模块导入"}],"id":"#css-模块导入","children":[{"type":"heading","raw":"### CSS Modules 导入\n\n","depth":3,"text":"CSS Modules 导入","tokens":[{"type":"text","raw":"CSS Modules 导入","text":"CSS Modules 导入"}],"id":"#css-modules-导入"},{"type":"heading","raw":"### 全局样式导入\n\n","depth":3,"text":"全局样式导入","tokens":[{"type":"text","raw":"全局样式导入","text":"全局样式导入"}],"id":"#全局样式导入"}]},{"type":"heading","raw":"## 使用 LESS\n\n","depth":2,"text":"使用 LESS","tokens":[{"type":"text","raw":"使用 LESS","text":"使用 LESS"}],"id":"#使用-less","children":[{"type":"heading","raw":"### 自定义 LESS 配置\n\n","depth":3,"text":"自定义 LESS 配置","tokens":[{"type":"text","raw":"自定义 LESS 配置","text":"自定义 LESS 配置"}],"id":"#自定义-less-配置"}]},{"type":"heading","raw":"## 使用 Sass\n\n","depth":2,"text":"使用 Sass","tokens":[{"type":"text","raw":"使用 Sass","text":"使用 Sass"}],"id":"#使用-sass","children":[{"type":"heading","raw":"### 自定义 Sass 配置\n\n","depth":3,"text":"自定义 Sass 配置","tokens":[{"type":"text","raw":"自定义 Sass 配置","text":"自定义 Sass 配置"}],"id":"#自定义-sass-配置"},{"type":"heading","raw":"### Sass 变量\n\n","depth":3,"text":"Sass 变量","tokens":[{"type":"text","raw":"Sass 变量","text":"Sass 变量"}],"id":"#sass-变量"}]},{"type":"heading","raw":"## todo\n\n","depth":2,"text":"todo","tokens":[{"type":"text","raw":"todo","text":"todo"}],"id":"#todo"}]}