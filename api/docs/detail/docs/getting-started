{"data":{"title":"快速开始","path":"/docs/getting-started","file":"docs/basic/01-getting-started.md","hasMenu":false,"htmlContent":"<h1 id=\"快速开始\">快速开始</h1>\n<p>Joy 支持 React、Node 或者前后端混合应用开发，这里以一个简单的 React 应用为例，介绍如何快速开始开发。</p>\n<h2 id=\"环境准备\">环境准备</h2>\n<ul>\n<li><p>node 建议 12 或以上版本，推荐使用 nvm 来管理 node 版本。</p>\n</li>\n<li><p>推荐使用 yarn 管理依赖，国内使用 <a href=\"https://npmmirror.com/\">阿里 npm 源</a> registry: <a href=\"https://registry.npm.taobao.org\">https://registry.npm.taobao.org</a></p>\n</li>\n</ul>\n<pre><code class=\"hljs language-shell\"><span class=\"hljs-meta\"># </span><span class=\"language-bash\">安装 yarn</span>\n<span class=\"hljs-meta\">$ </span><span class=\"language-bash\">npm i yarn -g</span>\n<span class=\"hljs-meta\"># </span><span class=\"language-bash\">手动设置`registry`地址为国内源</span>\n<span class=\"hljs-meta\">$ </span><span class=\"language-bash\">yarn config <span class=\"hljs-built_in\">set</span> registry https://registry.npm.taobao.org</span>\n<span class=\"hljs-meta\"># </span><span class=\"language-bash\">查看源</span>\n<span class=\"hljs-meta\">$ </span><span class=\"language-bash\">yarn config get registry</span>\n<span class=\"hljs-meta\">\n# </span><span class=\"language-bash\">或者使用 tyarn</span>\n<span class=\"hljs-meta\">$ </span><span class=\"language-bash\">npm i yarn tyarn -g</span>\n<span class=\"hljs-meta\"># </span><span class=\"language-bash\">后面文档里的 yarn 换成 tyarn</span>\n<span class=\"hljs-meta\">$ </span><span class=\"language-bash\">tyarn -v</span>\n</code></pre>\n<h2 id=\"创建目录\">创建目录</h2>\n<p>创建应用根目录</p>\n<pre><code class=\"hljs language-shell\"><span class=\"hljs-meta\">$ </span><span class=\"language-bash\"><span class=\"hljs-built_in\">mkdir</span> myapp &amp;&amp; <span class=\"hljs-built_in\">cd</span> myapp</span>\n</code></pre>\n<p>创建应用内目录和文件，目录结构如下：</p>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-string\">myapp</span>\n  <span class=\"hljs-string\">src</span>  <span class=\"hljs-comment\"># 源代码目录</span>\n    <span class=\"hljs-string\">pages</span>  <span class=\"hljs-comment\"># 约定React路由目录</span>\n      <span class=\"hljs-string\">index.tsx</span>  <span class=\"hljs-comment\"># 第一个页面</span>\n  <span class=\"hljs-string\">package.json</span>\n</code></pre>\n<ul>\n<li>在 package.json 内声明应用名和依赖：</li>\n</ul>\n<pre><code class=\"hljs language-json\"><span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;myapp&quot;</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;version&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;v1.0.0&quot;</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;scripts&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">&quot;dev&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;joy dev&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">&quot;export&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;joy build&amp;&amp;joy export&quot;</span>\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;dependencies&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">&quot;react&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;^17.0.1&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">&quot;react-dom&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;^17.0.1&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">&quot;@symph/joy&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;^2.0.0&quot;</span>\n  <span class=\"hljs-punctuation\">}</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<ul>\n<li>创建第一个路由页面<code>index.tsx</code>, Joy 同时支持 ES6 和 Typescript 语法，如果使用 ES6，创建 JS 文件<code>index.jsx</code>，添加页面展现内容:</li>\n</ul>\n<pre><code class=\"hljs language-tsx\"><span class=\"hljs-comment\">// src/pages/index.tsx</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">ReactController</span>, <span class=\"hljs-title class_\">BaseReactController</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;@symph/react&quot;</span>;\n\n<span class=\"hljs-meta\">@ReactController</span>()\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Index</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">BaseReactController</span> {\n  <span class=\"hljs-title function_\">renderView</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Hello Joy!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span>;\n  }\n}\n</code></pre>\n<h2 id=\"安装依赖\">安装依赖</h2>\n<pre><code class=\"hljs language-shell\"><span class=\"hljs-meta\">$ </span><span class=\"language-bash\">yarn install</span>\n</code></pre>\n<h2 id=\"启动开发服务器\">启动开发服务器</h2>\n<pre><code class=\"hljs language-shell\"><span class=\"hljs-meta\">$ </span><span class=\"language-bash\">yarn dev</span>\n</code></pre>\n<p>当命令行输出<code>ready - started server on http://localhost:3000</code>时，开发服务器启动成功，打开浏览器输入地址 <code>http://localhost:3000</code>，即可看到我们的第一个页面<code>Hello Joy!</code>。\n若此时修改页面内容<code>Hello Joy!</code>为<code>Hello MyApp</code>，然后保存文件，浏览器界面将自动更新为新内容。</p>\n<h2 id=\"部署发布\">部署发布</h2>\n<h3 id=\"构建\">构建</h3>\n<pre><code class=\"hljs language-shell\"><span class=\"hljs-meta\">$ </span><span class=\"language-bash\">yarn <span class=\"hljs-built_in\">export</span></span>\n</code></pre>\n<p>构建产物默认生成到 ./out 下，目录结构类似于：</p>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-string\">./out</span>\n<span class=\"hljs-string\">index.html</span>\n<span class=\"hljs-number\">404.</span><span class=\"hljs-string\">html</span>\n<span class=\"hljs-string\">_joy/</span> <span class=\"hljs-comment\"># 包含js、css、json等</span>\n</code></pre>\n<h3 id=\"本地验证\">本地验证</h3>\n<p>使用<code>http-server</code>启动本地静态文件服务器</p>\n<pre><code class=\"hljs language-shell\"><span class=\"hljs-meta\"># </span><span class=\"language-bash\">安装 http-server</span>\n<span class=\"hljs-meta\">$ </span><span class=\"language-bash\">npm i -g http-server</span>\n<span class=\"hljs-meta\">\n# </span><span class=\"language-bash\">启动服务器</span>\n<span class=\"hljs-meta\">$ </span><span class=\"language-bash\">http-server ./out</span>\n</code></pre>\n<p>在浏览器上打开地址：<a href=\"http://127.0.0.1:8080\">http://127.0.0.1:8080</a>, 正常情况下应该是和<code>yarn dev</code>开发运行时是一致的。</p>\n<h3 id=\"部署\">部署</h3>\n<p>本地验证完成后，将<code>out</code>目录部署到服务器上即可。</p>\n"},"treeData":[{"type":"heading","raw":"## 环境准备\n\n","depth":2,"text":"环境准备","tokens":[{"type":"text","raw":"环境准备","text":"环境准备"}],"id":"#环境准备"},{"type":"heading","raw":"## 创建目录\n\n","depth":2,"text":"创建目录","tokens":[{"type":"text","raw":"创建目录","text":"创建目录"}],"id":"#创建目录"},{"type":"heading","raw":"## 安装依赖\n\n","depth":2,"text":"安装依赖","tokens":[{"type":"text","raw":"安装依赖","text":"安装依赖"}],"id":"#安装依赖"},{"type":"heading","raw":"## 启动开发服务器\n\n","depth":2,"text":"启动开发服务器","tokens":[{"type":"text","raw":"启动开发服务器","text":"启动开发服务器"}],"id":"#启动开发服务器"},{"type":"heading","raw":"## 部署发布\n\n","depth":2,"text":"部署发布","tokens":[{"type":"text","raw":"部署发布","text":"部署发布"}],"id":"#部署发布","children":[{"type":"heading","raw":"### 构建\n\n","depth":3,"text":"构建","tokens":[{"type":"text","raw":"构建","text":"构建"}],"id":"#构建"},{"type":"heading","raw":"### 本地验证\n\n","depth":3,"text":"本地验证","tokens":[{"type":"text","raw":"本地验证","text":"本地验证"}],"id":"#本地验证"},{"type":"heading","raw":"### 部署\n\n","depth":3,"text":"部署","tokens":[{"type":"text","raw":"部署","text":"部署"}],"id":"#部署"}]}]}