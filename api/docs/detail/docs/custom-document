{"data":{"title":"自定义 Document","path":"/docs/custom-document","file":"docs/advanced-features/custom-document.md","hasMenu":false,"htmlContent":"<h1 id=\"自定义-document\">自定义 Document</h1>\n<p><code>Document</code> React 组件用于生成页面的<code>&lt;html&gt;</code>和<code>&lt;body&gt;</code>标签， Joy 会根据应用内的组件和样式，自动生成必须的 js 和 css 标签，保证页面 html 能够正常被加载。\n我们可以通过自定义<code>Document</code>在<code>&lt;html&gt;</code>加入自定义的扩展<code>&lt;head&gt;</code>、<code>&lt;link&gt;</code>或者<code>&lt;sciprt&gt;</code>。</p>\n<p>覆盖默认的<code>Document</code>，创建文件<code>./src/pages/_document.tsx</code>并修改<code>Document</code>如下：</p>\n<pre><code class=\"hljs language-tsx\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Document</span>, { <span class=\"hljs-title class_\">Html</span>, <span class=\"hljs-title class_\">Head</span>, <span class=\"hljs-title class_\">Main</span>, <span class=\"hljs-title class_\">JoyScript</span>, <span class=\"hljs-title class_\">DocumentContext</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;@symph/joy/document&quot;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyDocument</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Document</span>&lt;<span class=\"hljs-built_in\">any</span>&gt; {\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-title function_\">getInitialProps</span>(<span class=\"hljs-params\">ctx: DocumentContext</span>) {\n    <span class=\"hljs-keyword\">const</span> initialProps = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title class_\">Document</span>.<span class=\"hljs-title function_\">getInitialProps</span>(ctx);\n    <span class=\"hljs-keyword\">return</span> { ...initialProps };\n  }\n\n  <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> (\n      <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Html</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Head</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Head</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Main</span> /&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">JoyScript</span> /&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Html</span>&gt;</span></span>\n    );\n  }\n}\n</code></pre>\n<blockquote>\n<p>上面示例中的<code>MyDocument</code>，等效于 Joy 默认的<code>Document</code>，未加入自定义的内容，如果不需要<code>getInitialProps</code>或者<code>render</code>方法，可以删除掉。</p>\n</blockquote>\n<p><code>Html</code>、<code>Head</code>、<code>Main</code>和<code>JoyScript</code>是页面必须的，在自定义的<code>Document</code>类中，不要删除它们和更改顺序。\n但它们支持一些自定义的属性，例如：</p>\n<pre><code class=\"hljs language-tsx\">&lt;<span class=\"hljs-title class_\">Html</span> lang=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;\n</code></pre>\n<p>这里的<code>&lt;Head /&gt;</code>不同于<code>@symph/joy/react</code>中的<code>Head</code>组件，这里的<code>&lt;Head /&gt;</code>用于定义在所有页面中共有的<code>&lt;head&gt;</code>元素，而其它的，例如<code>&lt;title&gt;</code>标签，建议在页面组件中使用<code>@symph/joy/react</code>中的<code>Head</code>组件来定义。</p>\n<p><code>getInitialProps</code>方法返回<code>Document</code>组件的初始 props，参数<code>ctx: DocumentContext</code>具有以下属性：</p>\n<ul>\n<li><code>pathname</code>：<code>string</code>，当前渲染的页面路径。</li>\n<li><code>query</code>： <code>object</code>， url 中的请求参数被解析后的对象。</li>\n<li><code>req</code>：<a href=\"https://nodejs.org/api/http.html#http_class_http_incomingmessage\"><code>IncomingMessage</code></a>, 触发当前渲染的请求对象。</li>\n<li><code>res</code>：<a href=\"https://nodejs.org/api/http.html#http_class_http_serverresponse\"><code>ServerResponse</code></a>, 触发当前渲染的请求的响应对象。</li>\n<li><code>err</code> ：Error, 在渲染阶段出现的异常。</li>\n<li><code>renderPage</code>: <code>functin</code> 将<code>App</code>渲染为 html 字符串，返回值<code>{html, head}</code>在服务端渲染时。</li>\n</ul>\n<h2 id=\"注意事项\">注意事项</h2>\n<ul>\n<li><code>Document</code>只在服务端被渲染，事件处理并不会触发执行，例如<code>onClick</code>事件。同理 React 的部分生命周期也不会执行，例如<code>onComponentDidMount</code>。</li>\n<li>在<code>&lt;Main/&gt;</code>之外的 React 组件并不会被浏览器初始化，所以不要在这里添加任何业务逻辑。如果需要给整个应用添加统一的组件，可以在根布局组件中添加，或者<code>App</code>中添加。</li>\n</ul>\n"},"treeData":[{"type":"heading","raw":"## 注意事项\n\n","depth":2,"text":"注意事项","tokens":[{"type":"text","raw":"注意事项","text":"注意事项"}],"id":"#注意事项"}]}